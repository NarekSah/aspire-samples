@using Microsoft.AspNetCore.Identity

@inject KeycloakUrls KeycloakUrls

@{
    var userConsoleUrl = await KeycloakUrls.GetAccountConsoleUrlAsync("keycloak");
    var returnUrl = Url.Page("/Index", new { area = "" });

    // Do not attempt to return to the current page if it requires authorization
    var endpointMetadata = Context.GetEndpoint()?.Metadata;
    var requiresAuthz = endpointMetadata?.GetMetadata<IAuthorizeData>() is not null
                        && endpointMetadata?.GetMetadata<IAllowAnonymous>() is null;

    if (!requiresAuthz)
    {
        var routeData = Context.GetRouteData();
        var currentArea = routeData.Values["area"]?.ToString() ?? "";
        var currentPage = routeData.Values["page"]?.ToString() ?? "";
        var returnArea = string.IsNullOrEmpty(currentArea) ? currentArea : "";
        var returnPage = !string.IsNullOrEmpty(currentPage) ? currentPage : "/Index";
        returnUrl = Url.Page(returnPage, new { area = returnArea });
    }
}

<ul class="navbar-nav">
@if (User.Identity.IsAuthenticated)
{
    <li class="nav-item">
        <a class="nav-link text-dark" href="@userConsoleUrl" title="Manage" target="_blank">Hello @User.Identity?.Name!</a>
    </li>
    <li class="nav-item">
        <form class="form-inline" asp-page="/Logout" asp-route-returnUrl="@returnUrl">
            <button  type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" asp-page="/Login">Login</a>
    </li>
}
</ul>
