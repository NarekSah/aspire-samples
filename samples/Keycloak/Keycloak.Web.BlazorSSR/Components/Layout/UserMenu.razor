@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication.OpenIdConnect

@inject KeycloakUrls KeycloakUrls
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        <div class="top-row-item">Logged in as <a href="@userProfileManagementUrl" target="_blank" title="Manage user profile">@context.User.Identity?.Name</a></div>
        <div>
            <form method="post" action="logout" @formname="logout" @onsubmit="OnLogoutAsync">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                <button type="submit" class="btn-link">
                    Logout
                </button>
            </form>
        </div>
    </Authorized>
    <NotAuthorized>
        <a href="@Pages.Login.Url(NavigationManager)">Login</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? currentUrl;
    private string? userProfileManagementUrl;

    [CascadingParameter]
    public required HttpContext HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        userProfileManagementUrl = await KeycloakUrls.GetAccountConsoleUrlAsync("idp");
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private async Task OnLogoutAsync()
    {
        await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        await HttpContext.SignOutAsync(OpenIdConnectDefaults.AuthenticationScheme);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
